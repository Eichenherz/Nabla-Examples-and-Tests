#include "common.glsl"

#define _NBL_GLSL_EXT_FFT_INPUT_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_EXT_FFT_OUTPUT_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_
#include "nbl/builtin/glsl/ext/FFT/default_compute_fft.comp"

// Input Descriptor
layout(set=0, binding=0) readonly restrict buffer InputBuffer
{
	nbl_glsl_complex inData[];
};

// Output Descriptor
layout(set=0, binding=1, rgba16f) uniform image2D outImage;

// Get/Set Data Function
void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	const ivec2 coords = ivec2(coordinate.xy);

    vec4 color_value = imageLoad(outImage, coords);
    color_value[channel] = complex_value.x;
    imageStore(outImage, coords, color_value);
}

// TODO : remove
nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in uvec3 coordinate, in uint channel) 
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	uint index = channel * (dimension.x * dimension.y * dimension.z) + coordinate.z * (dimension.x * dimension.y) + coordinate.y * (dimension.x) + coordinate.x;
	return inData[index];
}