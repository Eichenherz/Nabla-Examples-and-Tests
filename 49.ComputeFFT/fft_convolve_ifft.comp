#include "common.glsl"

// Input Descriptors
layout(set=0, binding=0) buffer restrict InputOutputBuffer
{
	nbl_glsl_complex inoutData[];
};
layout(set=0, binding=1) uniform sampler2D NormalizedKernel[3];

// Get/Set Data Function
void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getPaddedDimensions();
	uint index = channel * (dimension.x * dimension.y * dimension.z) + coordinate.z * (dimension.x * dimension.y) + coordinate.y * (dimension.x) + coordinate.x;
	inoutData[index] = complex_value;
}

nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(in uvec3 coordinate, in uint channel)
{
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	uint index = channel * (dimension.x * dimension.y * dimension.z) + coordinate.z * (dimension.x * dimension.y) + coordinate.y * (dimension.x) + coordinate.x;
	return inoutData[index];
}

void convolve(in uint item_per_thread_count, in uint ch) 
{
	// TODO: decouple kernel size from image size (can't get the math to work in my head)
	uvec3 dimension = nbl_glsl_ext_FFT_Parameters_t_getDimensions();
	
	for(uint t=0u; t<item_per_thread_count; t++)
	{
		uint tid = gl_LocalInvocationIndex + t * _NBL_GLSL_WORKGROUP_SIZE_;
		// TODO: refactor
		uvec3 coords = nbl_glsl_ext_FFT_getCoordinates(tid);
		const uvec3 log2_size = uvec3(11u, 10u, 0u);
        coords = bitfieldReverse(coords)>>(uvec3(32u)-log2_size);

		nbl_glsl_complex sourceSpectrum = nbl_glsl_ext_FFT_impl_values[t];

        vec2 uv = (vec2(coords.xy))/vec2(uvec2(1u)<<log2_size.xy)+vec2(0.5f)/vec2(textureSize(NormalizedKernel[ch],0));
		//
		nbl_glsl_complex convSpectrum = textureLod(NormalizedKernel[ch],uv,0).xy;
		nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_complex_mul(sourceSpectrum,convSpectrum);
	}
}

void main()
{
    const uint dataLength = nbl_glsl_ext_FFT_Parameters_t_getFFTLength();
    const uint item_per_thread_count = dataLength>>_NBL_GLSL_WORKGROUP_SIZE_LOG2_;
    const uint numChannels = nbl_glsl_ext_FFT_Parameters_t_getNumChannels();
	for(uint ch = 0u; ch < numChannels; ++ch)
	{
		// Load Values into local memory
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			nbl_glsl_ext_FFT_impl_values[t] = nbl_glsl_ext_FFT_getPaddedData(nbl_glsl_ext_FFT_getCoordinates(tid),ch);
		}
		nbl_glsl_ext_FFT_preloaded(false,dataLength);
		barrier();

		convolve(item_per_thread_count,ch);
	
		barrier();
		nbl_glsl_ext_FFT_preloaded(true,dataLength);
		// write out to main memory
		for(uint t=0u; t<item_per_thread_count; t++)
		{
			const uint tid = (t<<_NBL_GLSL_WORKGROUP_SIZE_LOG2_)|gl_LocalInvocationIndex;
			nbl_glsl_ext_FFT_setData(nbl_glsl_ext_FFT_getCoordinates(tid),ch,nbl_glsl_ext_FFT_impl_values[t]);
		}
	}
}